#!/usr/bin/env bash

# Author: Jingwei Liu <liujingwei@gmail.com>

# Generate changelog from git tag/commit
# This could be useful if you use a linear semantic versioning/tagging scheme.

# USAGE
# $ changen PATH_TO_YOUR_GIT_REPO


set -e

dir=$1
[ -n $dir ] && dir='.'

cd $dir

OLDIFS=$IFS
IFS=$'\n'

# get current branch
head=`git rev-parse --abbrev-ref HEAD`

# get current commit
HEAD=`git rev-parse HEAD`

# append initial commit to the end
tag_list=`git tag --sort="-v:refname"; git rev-list --max-parents=0 ${head}`


from=''
to=''

# loop through tag list
for t in $tag_list
do
  if [ -z "$to" ] ; then
    # get commit hash of the first tag
    tag_commit_hash=`git show-ref --dereference $t | tail -n1 | awk '{print $1}'`
    # compare it with HEAD
    if [ "$tag_commit_hash" == "$HEAD" ] ; then
      to=$t
      display_name=$to
    else
      to="HEAD"
      display_name="Latest/$HEAD"
    fi
    continue
  fi

  from=$t
  # print out target tag version
  echo -n '## '$display_name
  # and its date
  git log -n1 --date=short --pretty=" (%cd)" $to

  # list of commits between adjacent semantic version/tags
  commits=`git rev-list --reverse $from..$to~`

  # update indices
  to=$t

  # print out each commit message
  for c in $commits
  do
    # ignore intermediate commits
    # commits like:
    #   - it works
    #   - wip
    #   - fixup
    #   - typo
    git log --no-merges -n1 --date=short --pretty="- %s" $c \
      | grep -Ev 'works|wip|working|^\[from \now\]'
  done

  # empty line between tags
  echo ""
done

IFS=$OLDIFS
